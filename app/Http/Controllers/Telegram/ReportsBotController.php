<?php

namespace App\Http\Controllers\Telegram;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Telegram;
use App\Report;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Commands\Command;

class ReportsBotController extends Controller
{
    // –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–ª–±–µ–∫–∏
    public function callBacks($callback, $state, $chat_id)
    {

      $params = $callback['callback_query']['data'];
      $state->update([
        'action' => $callback['callback_query']['message']['message_id'],
        'params' => $params
      ]);

      $data = json_decode($callback['callback_query']['data']);

      switch ($data->action) {
        case 'mainmenu':
            self::mainMenu($chat_id);
          break;

        case 'slide':
            self::slideReport($data, $state, $chat_id);
          break;

        case 'showlist':
            self::getList($data, $state, $chat_id);
          break;

        case 'go':
            self::getList($data, $state, $chat_id);
          break;

      }

    }

    // –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –≤–≤—ñ–¥
    public function textInputs($input, $state, $chat_id)
    {
      self::getReport($input, $state, $chat_id);
    }

    //////////////////////////////////////////////////////////
    // —Å–ª—É–∂–±–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

    public function getList($liveparams, $state, $chat_id)
    {
      $params = json_decode($state['params']);

      $reports = Report::where('type', $params->type)->orderBy('id', 'desc')->offset($params->offset)->limit(10)->get();

      if (count($reports) > 0) {
        $text = 'üêº –û—Å—å –∑–≤—ñ—Ç–∏ –∑–∞ —Ç–≤–æ—ó–º –∑–∞–ø–∏—Ç–æ–º:'. PHP_EOL. '–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –π–æ–≥–æ ID' .PHP_EOL. PHP_EOL;
        foreach ($reports as $report) {

          $text .= sprintf('üëâ ID:%s —Ç–∏–ø: %s, –∑–∞ –ø–µ—Ä—ñ–æ–¥: %s ' . PHP_EOL, $report->id, $report->type, $report->period);

        }

        $keyboard = [
          [
            // ['text'=>'‚¨Ö 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∞','callback_data'=>json_encode(['action'=>'go','type'=>$liveparams->type,'offset'=>0,])],
            ['text'=>'üîô –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
            ['text'=>'–ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚û°','callback_data'=>json_encode(['action'=>'go','type'=>$params->type,'offset'=>$params->offset + 10,])],
          ]
        ];
        $text .= PHP_EOL. '–î–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏:';

      } else {
        $keyboard = [
          [
             ['text'=>'üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
          ]
        ];
        $text = 'üêº –Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∂–æ–¥–Ω–æ–≥–æ –∑–≤—ñ—Ç—É';
      }

      $reply_markup = Keyboard::make([
         'inline_keyboard' => $keyboard,
         'resize_keyboard' => true,
         'one_time_keyboard' => true
      ]);
      $encodedMarkup = json_encode($reply_markup);

      $response = Telegram::editMessageText([
          'chat_id' => $chat_id,
          'message_id' => $state['action'],
          'text' => $text,
          'reply_markup' => $encodedMarkup,
      ]);

    }

    public function getReport($input, $state, $chat_id)
    {
      $report = Report::where('id', $input)->first();
      if ($report) {

        $text = self::reportBody($report);

        $keyboard = [
          [
            ['text'=>'‚¨Ö –ù–∞—Å—Ç—É–ø–Ω–∏–π','callback_data'=>json_encode(['action'=>'slide','type'=>$report->type,'offset'=>-1,'id'=>$report->id])],
            ['text'=>'–î–æ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
            ['text'=>'–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π ‚û°','callback_data'=>json_encode(['action'=>'slide','type'=>$report->type,'offset'=>1,'id'=>$report->id])],
          ]
        ];
      } else {
        $keyboard = [
          [
             ['text'=>'üîô –î–æ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
          ]
        ];
        $text = 'üêº –ó–≤—ñ—Ç—É –∑ —Ç–∞–∫–∏–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –Ω–µ–º–∞—î. –î–∞–≤–∞–π! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!';
      }
      $reply_markup = Keyboard::make([
         'inline_keyboard' => $keyboard,
         'resize_keyboard' => true,
         'one_time_keyboard' => true
      ]);
      $encodedMarkup = json_encode($reply_markup);

      Telegram::sendMessage([
          'chat_id' => $chat_id,
          'text' => $text,
          'reply_markup' => $encodedMarkup,
      ]);

    }

    public function slideReport($data, $state, $chat_id)
    {
      if ($data->offset > 0) {
        $report = Report::where('type', $data->type)->orderBy('id', 'desc')->where('id', '<', $data->id)->first(); // old
      } else {
        $report = Report::where('type', $data->type)->orderBy('id')->where('id', '>', $data->id)->first() ;// new
      }

        if ($report) {

          $text = self::reportBody($report);

          $keyboard = [
            [
              ['text'=>'‚¨Ö –ù–∞—Å—Ç—É–ø–Ω–∏–π','callback_data'=>json_encode(['action'=>'slide','type'=>$report->type,'offset'=>-1,'id'=>$report->id])],
              ['text'=>'–î–æ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
              ['text'=>'–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π ‚û°','callback_data'=>json_encode(['action'=>'slide','type'=>$report->type,'offset'=>1,'id'=>$report->id])],
            ]
          ];
        } else {
          $keyboard = [
            [
               ['text'=>'üîô –î–æ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤','callback_data'=>json_encode(['action'=>'mainmenu','type'=>null,'offset'=>0,])],
            ]
          ];
          $text = 'üêº –ó–≤—ñ—Ç—É –∑ —Ç–∞–∫–∏–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –Ω–µ–º–∞—î. –î–∞–≤–∞–π! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!';
        }
        $reply_markup = Keyboard::make([
           'inline_keyboard' => $keyboard,
           'resize_keyboard' => true,
           'one_time_keyboard' => true
        ]);
        $encodedMarkup = json_encode($reply_markup);

        Telegram::editMessageText([
            'chat_id' => $chat_id,
            'text' => $text,
            'reply_markup' => $encodedMarkup,
            'message_id' => $state['action'],
        ]);
    }

    public function mainMenu($chat_id)
    {
      $keyboard = [
        [
          ['text'=>'üåû –î–µ–Ω–Ω–∏–π','callback_data'=>json_encode(['action'=>'showlist','type'=>'daily','offset'=>0,])],
          ['text'=>'üìÖ –¢–∏–∂–Ω–µ–≤–∏–π','callback_data'=>json_encode(['action'=>'showlist','type'=>'weekly','offset'=>0,])],
          ['text'=>'üåñ –ú—ñ—Å—è—á–Ω–∏–π','callback_data'=>json_encode(['action'=>'showlist','type'=>'monthly','offset'=>0,])],
          ['text'=>'üìä –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∏–π','callback_data'=>json_encode(['action'=>'showlist','type'=>'quarterly','offset'=>0,])],
        ]
      ];

      $reply_markup = Keyboard::make([
         'inline_keyboard' => $keyboard,
         'resize_keyboard' => true,
         'one_time_keyboard' => true
      ]);
      $encodedMarkup = json_encode($reply_markup);

      $response = Telegram::sendMessage([
          'text' => '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫',
          'reply_markup' => $encodedMarkup,
          'chat_id' => $chat_id
      ]);
    }

    public function reportBody($report)
    {
        $text = 'üêº –¶–µ –∑–≤—ñ—Ç —è–∫–∏–π —è –∑–Ω–∞–π—à–æ–≤ –¥–ª—è —Ç–µ–±–µ:' .PHP_EOL. PHP_EOL;

        $text .= sprintf('üëâ –ó–≤—ñ—Ç ID:%s —Ç–∏–ø: %s, –∑–∞ %s' . PHP_EOL . PHP_EOL, $report->id, $report->type, $report->period);
        $text .= sprintf('üìö –≤—Å—å–æ–≥–æ –∑–∞–Ω—è—Ç—å: %s, üë¶ —É—á–Ω—ñ–≤: %s' . PHP_EOL, $report->lessons_count, $report->students_count);
        $text .= sprintf('üìõ –ø—Ä–æ–ø—É—Å–∫—ñ–≤: %s, üêî –∑ –Ω–∏—Ö –Ω–µ–æ–ø–ª–∞—Ç–Ω–∏—Ö: %s' . PHP_EOL, $report->pass_count, $report->pass_notpayed_count);
        $text .= sprintf('üí∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: %s, üéì –¥–æ—Ö—ñ–¥ —Ç—å—é—Ç–æ—Ä—ñ–≤: %s' . PHP_EOL, $report->lessons, $report->wage);
        $text .= sprintf('üí≤ –ø—Ä–æ—Ñ—ñ—Ç: %s' . PHP_EOL, $report->profit);
        $text .= 'üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:' . PHP_EOL;
        $text .= sprintf('‚Üò –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: %s, ‚Üó –≤–∏–¥–∞—Ç–∫–∏: %s' . PHP_EOL, $report->pays_in, $report->pays_out);
        $text .= sprintf('üí≤ —á–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ—Ç: %s' . PHP_EOL, $report->pays_profit);

        $text .= PHP_EOL. '–¢–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–º—ñ—â–∞—Ç–∏—Å—å –º—ñ–∂ —Å—É—Å—ñ–¥–Ω—ñ–º–∏ –∑–≤—ñ—Ç–∞–º–∏ –≤—ñ–¥—ñ–±—Ä–∞–Ω–∏–º–∏ –∑–∞ —Ç–∏–ø–æ–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:';

        return $text;
    }
}
