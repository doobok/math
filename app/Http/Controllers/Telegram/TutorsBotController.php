<?php

namespace App\Http\Controllers\Telegram;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Telegram;
use App\Tutor;
use Telegram\Bot\Keyboard\Keyboard;

class TutorsBotController extends Controller
{
    // –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–ª–±–µ–∫–∏
    public function callBacks($callback, $state, $chat_id)
    {
      switch ($state['action']) {
        case 'confirm':
        // –ø º—è—Ç–∞ –¥—ñ—è (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è)
          switch ($callback['callback_query']['data']) {
            case 'confirm':
                self::confirmPay($state, $chat_id);
              break;
            case 'cancel':
                Telegram::sendMessage([
                  'chat_id' => $chat_id,
                  'text' => '‚ö† –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞...'
                ]);
              break;
          }
          $state->update(['command' => '/tutors','action' => null,'params' => null]);//–æ–±–Ω—É–ª—è—î–º–æ —Å—Ç–µ–π—Ç
            Telegram::sendMessage([
              'chat_id' => $chat_id,
              'text' => 'üêº –ú–µ–Ω—ñ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ç—å—é—Ç–æ—Ä–∞–º–∏! –ê —Ç–æ–±—ñ? –î–∞–≤–∞–π —â–µ —Ä–∞–∑ –Ω–∞ –Ω–∏—Ö –ø–æ–¥–∏–≤–∏–º–æ—Å—å! –ù–∞—Ç–∏—Å–∫–∞–π /tutors'
            ]);
          break;

        default:
        // –ø–µ—Ä—à–∞ –¥—ñ—è (–≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–Ω–æ–ø–∫—É)
          $params = json_decode($callback['callback_query']['data']);
          if ($params) {
            switch ($params->action) {
              case 'show':
                  return self::showTutor($params, $state, $chat_id);
                break;
              case 'pay':
                  $state->update([
                    'action' => 'pay',
                    'params' => json_encode(['id' => $params->id])
                  ]);
                  Telegram::sendMessage([
                    'chat_id' => $chat_id,
                    'text' => 'üí≤ –í–≤–µ–¥–∏ —Å—É–º—É, —è–∫—É –≤–∏–¥–∞—î—à'
                  ]);
                break;
            }
          } else {
            // —Ñ—ñ–∫—Å–∏–º –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –Ω–µ –∑–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—î–º
            $state->update(['command' => '/tutors','action' => null,'params' => null]);//–æ–±–Ω—É–ª—è—î–º–æ —Å—Ç–µ–π—Ç
            Telegram::sendMessage([
             'chat_id' => $chat_id,
             'text' => 'üêº –¢–∏ —è–≤–Ω–æ, —â–æ—Å—å —Ä–æ–±–∏—à –Ω–µ —Ç–∞–∫.' .PHP_EOL.'–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑ –ø–æ—á–∞—Ç–∫—É /tutors' .PHP_EOL.'–ê–±–æ –Ω–∞–≤—ñ—Ç—å –∑ —Å–∞–º–æ–≥–æ –ø–æ—á–∞—Ç–∫—É /start'
            ]);
          }
          break;
      }
    }

    // –æ–±—Ä–æ–±–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –≤–≤—ñ–¥
    public function textInputs($input, $state, $chat_id)
    {
      switch ($state['action']) {
        // –¥—Ä—É–≥–∞ –¥—ñ—è (–≤–≤–æ–¥–∏–º–æ —Å—É–º—É –≤–∏–ø–ª–∞—Ç–∏)
        case 'pay':
            self::paySumm($input, $state, $chat_id);
          break;

        default:
            Telegram::sendMessage([
             'chat_id' => $chat_id,
             'text' => 'üêº –Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é.' .PHP_EOL.'–ú–æ–∂–ª–∏–≤–æ, –æ—á—ñ–∫—É—î—Ç—å—Å—è –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É?' .PHP_EOL.'–ê —ñ–Ω–∫–æ–ª–∏ –≤–∞—Ä—Ç–æ –ø–æ—á–∞—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥–∏ /start'
            ]);
          break;
      }
    }

    public function showTutor($params, $state, $chat_id)
    {
      $state->update([
        'action' => 'show',
        'params' => json_encode(['id' => $params->id])
      ]);
      $tutor = Tutor::findorfail($params->id);
      $string = sprintf('ID%s: üéì %s %s %s' . PHP_EOL, $tutor->id, $tutor->lname, $tutor->name, $tutor->mname );
      $string .= sprintf('%s: %s %s' . PHP_EOL, 'üíµ –ë–∞–ª–∞–Ω—Å', $tutor->balance, '–≥—Ä–Ω' );
      $string .= sprintf('%s: %s' . PHP_EOL, 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', $tutor->phone );
      $string .= sprintf('%s' . PHP_EOL, $tutor->comment );

        Telegram::sendMessage([
          'chat_id' => $chat_id,
          'text' => $string
        ]);
    }

    //////////////////////////////////////////////////////////
    // —Å–ª—É–∂–±–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    public function paySumm($input, $state, $chat_id)
    {
      if (filter_var ( $input, FILTER_VALIDATE_INT )) {
        if ($input > 0) {
          // –æ—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
          $params = json_decode($state['params']);
          // –æ–±–Ω–æ–≤–ª—è—î–º —Å—Ç–µ–π—Ç
          $state->update([
            'action' => 'confirm',
            'params' => json_encode(['id' => $params->id, 'summ' => $input])
          ]);
          // –æ—Ç—Ä–∏–º—É—î–º–æ —É—á–Ω—è
          $tutor = Tutor::findorfail($params->id);
          // —Ñ–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
          $keyboard = [
            [
              ['text'=>'‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏','callback_data'=>'confirm'],
              ['text'=>'üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏','callback_data'=>'cancel'],
            ],
          ];
          $string = sprintf('%s:%s' . PHP_EOL, '‚ùì –í–∏–¥–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É —Ç—å—é—Ç–æ—Ä—É –∑ ID', $tutor->id );
          $string .= sprintf('%s %s %s, %s %s %s' . PHP_EOL, $tutor->lname, $tutor->name, $tutor->mname, '–∑ –ø–æ—Ç–æ—á–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º üíµ', $tutor->balance, '–≥—Ä–Ω?' );
          $string .= sprintf('%s %s %s' . PHP_EOL, '–î–æ –≤–∏–¥–∞—á—ñ üíµ', $input, '–≥—Ä–Ω' );

          $reply_markup = Keyboard::make([
             'inline_keyboard' => $keyboard,
             'resize_keyboard' => true,
             'one_time_keyboard' => true
          ]);
          $encodedMarkup = json_encode($reply_markup);

          $response = Telegram::sendMessage([
              'text' => $string,
              'reply_markup' => $encodedMarkup,
              'chat_id' => $chat_id
          ]);
          $text = false;
        } else {
          $text = '‚ö† –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º';
        }
      } else {
        $text = '‚ö† –ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–≤–µ–¥–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ';
      }
      // —è–∫—â–æ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–æ –≤–∏–≤–æ–¥–∏–º–æ
      if ($text) {
        Telegram::sendMessage([
         'chat_id' => $chat_id,
         'text' => $text
        ]);
      }
    }

    public function confirmPay($state, $chat_id)
    {
      $params = json_decode($state['params']);

      $tutor = Tutor::findorfail($params->id);
      $tutor->balance = $tutor->balance - $params->summ;
      $tutor->save();

      Telegram::sendMessage([
       'chat_id' => $chat_id,
       'text' => 'üí∂ –ú–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É!' .PHP_EOL. '–©–∞—Å–ª–∏–≤–∏–π —Ç—å—é—Ç–æ—Ä –±—ñ–∂–∏—Ç—å –≤ –ø—Ä–∏–ø—Ä–∏–∂–∫—É üèÉ' .PHP_EOL. '‚òù –ù–µ –∑–∞–±—É–≤–∞–π —Ö–≤–∞–ª–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤!'
      ]);
    }
}
